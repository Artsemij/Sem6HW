Задача 1. В прямом порядке

Дано натуральное число N. Выведите все его цифры по одной, в прямом
порядке, разделяя их пробелами или новыми строками. Необходимо
реализовать рекурсивную функцию.
void print_num(int num)

Данные на входе: Одно целое неотрицательное число
Данные на выходе: Все цифры числа через пробел в прямом порядке.

#include <stdio.h>

void print_num(int num) {

    if (num < 10) {

        printf("%d ", num);

    } else {

        print_num(num / 10); // вызываем функцию для числа без последней цифры

        printf("%d ", num % 10); // выводим последнюю цифру 

    }

}

int main() {

    int n;

    printf("Введите целое неотрицательное число: ");

    scanf("%d", &n);

    printf("Цифры числа в прямом порядке: ");

    print_num(n);

    return 0;

}


Задача 2. От A до B

Составить рекурсивную функцию. Выведите все числа от A до B
включительно, в порядке возрастания, если A < B, или в порядке убывания в
противном случае.

Данные на входе: Два целых числа через пробел.
Данные на выходе: Последовательность целых чисел

#include <stdio.h>

void printSequence(int a, int b) {
    if (a <= b) {
        printf("%d ", a);
        printSequence(a + 1, b);
    } else {
        printf("%d ", a);
        printSequence(a - 1, b);
    }
}

int main() {
    int num1, num2;
    printf("Введите два целых числа через пробел: ");
    scanf("%d %d", &num1, &num2);
    if (num1 <= num2) {
        printf("Последовательность от %d до %d: ", num1, num2);
    } else {
        printf("Последовательность от %d до %d: ", num1, num2);
    }
    printSequence(num1, num2);
    return 0;
}



Задача 3. Количество 1

Дано натуральное число N. Посчитать количество «1» в двоичной записи
числа.

Данные на входе: Натуральное число
Данные на выходе: Целое число - количество единиц в двоичной записи
числа.

#include <stdio.h>

int countOnesInBinary(int n) {
    if (n == 0) {
        return 0;
    } else {
        return (n % 2) + countOnesInBinary(n / 2);
    }
}

int main() {
    int number;
    printf("Введите натуральное число: ");
    scanf("%d", &number);
    printf("Количество единиц в двоичной записи числа: %d\n", countOnesInBinary(number));
    return 0;
}

Задача 4. Все нечетные

Дана последовательность целых чисел через пробел, завершающаяся числом
0. Выведите все нечетные числа из этой последовательности, сохраняя их
порядок.

Данные на входе: Последовательность ненулевых целых чисел. В конце
число 0.
Данные на выходе: Введенная последовательность, кроме четных чисел
в том же порядке. Число 0 не выводить.

void printOddNumbers() {
int number;
scanf("%d", &number);
if (number != 0) {
if (number % 2 != 0) {
printf("%d ", number);
}
printOddNumbers(); // рекурсивный вызов функции
}
}

int main() {
printf("Введите последовательность целых чисел (введите 0 для завершения): ");
printOddNumbers();
return 0;
}

Задача 5. Сколько раз встречается символ a

Дана строка из английских символов, пробелов и знаков препинания. В конце
строки символ точка. Необходимо реализовать рекурсивную функцию,
которая считывает данную строку со стандартного потока ввода и возвращает
целое число – количество символов 'a' в данной строке.
int acounter(void)
Используя данную функцию решить задачу.

Данные на входе: Строка состоящая из английских букв, пробелов и
знаков препинания. В конце строки символ '.'
Данные на выходе: Одно целое число.

#include <stdio.h>

int acounter(void) {
    char c = getchar(); // Считываем символ из стандартного потока ввода

    if (c == '.') { // Если достигнут конец строки
        return 0; // Возвращаем 0
    } else {
        if (c == 'a' || c == 'A') {
            return 1 + acounter(); // Если текущий символ 'a' или 'A', увеличиваем счетчик и рекурсивно вызываем функцию для следующего символа
        } else {
            return acounter(); // Иначе просто рекурсивно вызываем функцию для следующего символа
        }
    }
}

int main() {
    int result = acounter(); // Вызываем функцию для подсчета символов 'a'
    printf("%d\n", result); // Выводим результат
    return 0;
}



Задача 6. Возвести в степень

Написать рекурсивную функцию возведения целого числа n в степень p.
int recurs_power(int n, int p)
Используя данную функцию, решить задачу.

Данные на входе: Два целых числа -100 >= n >= 100 и 0 >= p >= 100
Данные на выходе: Одно целое число n в степени p

#include <stdio.h>

int recurs_power(int n, int p) {
    if (p == 0) { // Базовый случай: любое число в степени 0 равно 1
        return 1;
    } else {
        return n * recurs_power(n, p - 1); // Рекурсивно умножаем число n на себя p раз
    }
}

int main() {
    int n, p;
    
    printf("Введите число n (-100 <= n <= 100): ");
    scanf("%d", &n);
    
    printf("Введите степень p (0 <= p <= 100): ");
    scanf("%d", &p);
    
    if (n < -100 || n > 100 || p < 0 || p > 100) {
        printf("Введены некорректные данные.\n");
    } else {
        int result = recurs_power(n, p); // Вызываем функцию для возведения числа n в степень p
        printf("%d в степени %d = %d\n", n, p, result); // Выводим результат
    }
    
    return 0;
}
